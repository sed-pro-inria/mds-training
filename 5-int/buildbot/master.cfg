# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.

#------------------------------ main objects ---------------------------------
c = BuildmasterConfig = {}

#-------------------------------- buildslaves ---------------------------------
# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [ \
    BuildSlave('ubuntu', 'passwd'),
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

tetrinria_git = r'file:///home/david/repo/tetrinria'

#------------------------------ changesources ---------------------------------

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
poller = GitPoller(
    project='tetrinria',
    repourl = tetrinria_git,
    branch = 'master',
    pollinterval = 30)

c['change_source'] = [poller, ]

#-------------------------------- schedulers ----------------------------------
# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler, StringParameter
from buildbot.schedulers import timed
from buildbot.changes import filter

git_sched = SingleBranchScheduler(
    name="Every Git commit",
    change_filter=filter.ChangeFilter(project='tetrinria'),
    treeStableTimer=None,
    builderNames = [
        'ubuntu-on-commit',
    ],
)

force_sched = ForceScheduler(
    name="force",
    builderNames=[
        'ubuntu-on-commit',
	],
    reason=StringParameter(name="reason",label="reason:<br>",
                           required=True, size=80),
)

nightly_sched = timed.Nightly(
     name = 'nightly',
     branch = 'master',
     builderNames = [
        'ubuntu-nightly',
     ],
     hour = 3,
     minute = 0,
     )

c['schedulers'] = [git_sched, force_sched, nightly_sched]

#--------------------------------- builders -----------------------------------
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
from buildbot.process import factory
factory_incremental = factory.BuildFactory()
factory_full = factory.BuildFactory()

# get sources
#------------------------
from buildbot.steps.source.git import Git

incremental = Git(
    repourl = tetrinria_git,
    branch = 'master',
    mode = 'incremental',
    description = 'updating Git develop branch',
    descriptionDone = 'update Git develop branch',
)
factory_incremental.addStep(incremental)

full = Git(
    repourl = tetrinria_git,
    branch = 'master',
    mode = 'full',
    description = 'updating Git develop branch',
    descriptionDone = 'update Git develop branch',
)
factory_full.addStep(full)

# configure
#------------------------
from buildbot.steps import shell

s = shell.Configure( \
    workdir = 'build/build',
    command=["cmake", "-DCMAKE_BUILD_TYPE=TEST", ".."],
    )
factory_incremental.addStep(s)
factory_full.addStep(s)

# build
#------------------------

s = shell.Compile( \
    workdir = 'build/build',
    command = ['make'],
    description="compiling",
    descriptionDone="compile",
    haltOnFailure=True,
    warnOnWarnings=True,
)
factory_incremental.addStep(s)
factory_full.addStep(s)
 
# tests
#------------------------
from buildbot.steps.shell import Test

s = Test( \
    workdir = 'build/build',
    command = [ "make", "test"],
    description = "testing",
    descriptionDone = "test",
    warnOnWarnings=True,
)
factory_incremental.addStep(s)
factory_full.addStep(s)

# register the factory
#------------------------
from buildbot.config import BuilderConfig

c['builders'] = [

    BuilderConfig(
      name="ubuntu-on-commit",
      slavenames=["ubuntu"],
      factory=factory_incremental,
    ),

    BuilderConfig(
      name="ubuntu-nightly",
      slavenames=["ubuntu"],
      factory=factory_full,
    ),

]

#------------------------------ status targets --------------------------------
# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([('user','passwd'),]),
    gracefulShutdown = 'auth',
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

#----------------------------- project identity -------------------------------
# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Tetrinria"
c['titleURL'] = "https://github.com/sed-pro-inria/tetrinria"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
